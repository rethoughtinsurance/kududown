@namespace("org.kududown.avro")
protocol KuduDownSchema {

  // This is replicated from the Typescript kududown-schema-types.ts.
  // It is used in a KuduMessage to indicate the type being transmitted.
  enum KuduSchemaType {
    KuduScan,
    KuduInsert,
    KuduScanResult
  }

  record KuduMessage {
    KuduSchemaType schemaType;
    bytes obj; // Avro-serialized object of the specific type.
  }

  enum KuduOperationType {
    SCAN, INSERT, DELETE
  }

  record KuduOperation {
    string id;
    KuduOperationType operationType;
  }

  enum KuduComparisonOperator {
    EQUAL,
    GREATER,
    GREATER_EQUAL, // For numeric or String 'LIKE' comparisons
    LESS,
    LESS_EQUAL,
    IS_NULL,
    IS_NOT_NULL
  }

  enum KuduDataType {
    BOOLEAN,
    INT8,
    INT16,
    INT32,
    INT64,
    UNIXTIME64,
    FLOAT32,
    FLOAT64,
    DECIMAL,
    STRING,
    BINARY
  }

  enum KuduColumnEncoding {
    AUTO_ENCODING,
    PLAIN_ENCODING,
    RLE,
    DICT_ENCODING,
    BIT_SHUFFLE,
    PREFIX_ENCODING
  }

  record KuduColumnDef {
    string columnName;
    KuduDataType dataType;
    boolean allowNull;
    union {null,KuduColumnEncoding} encoding;
    boolean isPrimaryKey;
  }

  record KuduDataValue {
    // Only string values or binary for now, they are converted in the Kudu interface
    KuduDataType dataType;
    union {null,string,bytes} value;
  }

  enum KuduPredicateType {
    COMPARISON,
    IN_LIST,
    IS_NULL,
    IS_NOT_NULL
  }

  record KuduComparisonPredicate {
    KuduColumnDef column;
    KuduComparisonOperator operator;
    string dataValue;
  }

  record KuduInListPredicate {
    KuduColumnDef column;
    array<string> valueList;
  }

  record KuduPredicate {
    KuduPredicateType type;
    KuduColumnDef column;
    // Null is used for types IS_NULL and IS_NOT_NULL, no data other than the column is needed.
    union {null,KuduComparisonPredicate,KuduInListPredicate} predicate;
  }

  record KuduScan {
    KuduOperation op;
    string tableName;
    array<KuduColumnDef> projectedColumnList;
    array<KuduPredicate> predicateList;
  }

  /**
   * KuduRow holds any row of arbitrary columns for writing or reading.
   */
  record KuduRow {
    array<KuduDataValue> values;
  }

  /**
   * KuduScanResult is only used for test data stored on disk for a query.
   * The kududown API only returns KuduRow values.
   */
  record KuduScanResult {
    string scanId;
    array<KuduRow> rows;
  }

  /**
   * A KuduInsert KuduRow contains all requested columns, primary key or otherwise.
   */
  record KuduInsert {
    KuduOperation op;
    string tableName;
    array<KuduColumnDef> columns;
    KuduRow row;
  }

  /**
   * A KuduKey is similar to KuduInsert but contains only primary key columns,
   * it can be passed to/from put/get, and optionally returned from a
   * kududown iterator if desired (although not much practical use for
   * that, normally only values will be requested).
   */
  record KuduKey {
    KuduOperation op;
    string tableName;
    array<KuduColumnDef> columns;
    KuduRow row;
  }

}
