// This file is renamed for now, as we don't need to expose kududown as a
// typescript module. Could not get it to work, but not really required.
import { AbstractLevelDOWN, AbstractIteratorOptions, AbstractIterator } from 'abstract-leveldown';

type BaseType = string | Buffer

export interface KuduDown
  extends KuduDownConstructor, AbstractLevelDOWN<
  BaseType, BaseType,
  KuduDownOptions,
  KuduDownPutOptions,
  KuduDownGetOptions,
  KuduDownDeleteOptions,
  KuduDownIteratorOptions,
  KuduDownBatchOptions
  > {

  approximateSize(start: BaseType, end: BaseType, cb: (err: any, size: number) => void): void;
  compactRange(start: BaseType, end: BaseType, cb: (err?: any) => void): void;
  getProperty(property: string): string;
  destroy(location: string, cb: (err?: any) => void): void;
  repair(location: string, cb: (err?: any) => void): void;

  iterator(options?: KuduDownIteratorOptions & AbstractIteratorOptions<BaseType>): KuduDownIterator
}

interface KuduDownConstructor {
  new (location: string): KuduDown
  (location: string): KuduDown
}

export interface KuduDownOptions {
  // createIfMissing?: boolean;
  // errorIfExists?: boolean;
  // compression?: boolean;
  // cacheSize?: number;
  // writeBufferSize?: number;
  // blockSize?: number;
  // maxOpenFiles?: number;
  // blockRestartInterval?: number;
  // maxFileSize?: number;
}

export interface KuduDownPutOptions {
  sync?: boolean
}

export interface KuduDownGetOptions {
  // fillCache?: boolean;
  // asBuffer?: boolean;
}

export interface KuduDownDeleteOptions {
  // sync?: boolean;
}

export interface KuduDownIteratorOptions {
//  fillCache?: boolean;

  keyAsBuffer?: boolean;
  valueAsBuffer?: boolean;
}

export interface KuduDownBatchOptions {
  // sync?: boolean;
}

export interface KuduDownIterator extends AbstractIterator<BaseType, BaseType> {
  seek(key: BaseType): void;
  binding: any;
  cache: any;
  finished: any;
  fastFuture: any;
}

declare const KuduDown: KuduDownConstructor
export default KuduDown;
